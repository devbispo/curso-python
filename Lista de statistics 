{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Lista 5",
      "provenance": [],
      "authorship_tag": "ABX9TyMFgNUQSJvTBEQpeIqygDKj",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/devbispo/curso-python/blob/main/Lista%20de%20statistics%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "29seSqQJDP7j"
      },
      "source": [
        "%reset -f \n",
        "#resolução da questão 1 da lista 5\n",
        "import pandas as pd\n",
        "import seaborn as sn\n",
        "print(\"Quetão 1\")\n",
        "lista_matematica_musica ={'matematica' : [60,58,73,51,54,75,48,72,75,83,62,52], 'musica' : [80,62,70,83,62,92,79,88,54,82,64,69]} \n",
        "df = pd.DataFrame(lista_matematica_musica)\n",
        "cr = df.corr()\n",
        "print(cr)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jgkeg7nYFuTv"
      },
      "source": [
        "%reset -f \n",
        "#resolução da questão 2 da lista 5(somente um comentario)\n",
        "print('Questão 2')\n",
        "print('indica uma correlação desprezível.')\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pne065TgE5mA"
      },
      "source": [
        "%reset -f \n",
        "#resolução da questão 3 da lista 5\n",
        "import pandas as pd\n",
        "import seaborn as sn\n",
        "print('Questão 3 ')\n",
        "funcionarios = {'Anos de serviço ' :[2,3,4,5,4,6,7,8,8,10], 'Nº de Clientes ' :[48,50,56,52,43,60,62,58,64,72]}\n",
        "df = pd.DataFrame(funcionarios)\n",
        "cr = df.corr()\n",
        "print(cr)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Hrvd8Aa-KPoZ"
      },
      "source": [
        "%reset -f \n",
        "#resolução da questão 4 da lista 5\n",
        "import pandas as pd\n",
        "import seaborn as sn\n",
        "print('Questão 4')\n",
        "familia = {'X':[12,16,18,20,28,30,40,48,50,54], 'Y':[7.2,7.4,7.0,6.5,6.6,6.7,6.0,5.6,6.0,5.5]}\n",
        "df= pd.DataFrame(familia)\n",
        "cr = df.corr()\n",
        "print(cr)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZO3W135GQ0Jx",
        "outputId": "7d1c416f-7d87-418f-ab73-f169fc9ee71f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "%reset -f \n",
        "#resolução da questão 5 da lista 5(somente a letra b)\n",
        "import pandas as pd\n",
        "import seaborn as sn\n",
        "import matplotlib.pyplot as plt\n",
        "import statistics\n",
        "print('Questão 5 \\nCoeficiente de correlação')\n",
        "\n",
        "conjunto1 = {'x':[10,8,13,9,11,14,6,4,12,7,5], 'y':[8.04,6.95,7.58,8.81,8.33,9.96,7.24,4.26,10.84,4.82,5.68]}\n",
        "conjunto2 = {'x2':[10,8,13,9,11,14,6,4,12,7,5],'Y2':[9.14,8.14,8.74,8.77,9.26,8.10,6.13,3.10,9.13,7.62,4.74]}\n",
        "conjunto3 = {'x3':[10,8,13,9,11,14,6,4,12,7,5],'y3':[7.46,6.77,12.74,7.11,7.81,8.84,6.08,5.39,8.15,6.42,5.73]}\n",
        "conjunto4 = {'x4':[8,8,8,8,8,8,8,19,8,8,8], 'y4':[6.58,5.76,7.71,8.84,8.47,7.04,5.25,12.50,5.56,7.91,6.89]}\n",
        "df=pd.DataFrame(conjunto1)\n",
        "df2=pd.DataFrame(conjunto2)\n",
        "df3=pd.DataFrame(conjunto3)\n",
        "df4=pd.DataFrame(conjunto4)\n",
        "cr=df.corr()\n",
        "cr2=df2.corr()\n",
        "cr3=df3.corr()\n",
        "cr4=df4.corr()\n",
        "print('correlação do conjunto 1: \\n',cr)\n",
        "print('correlação do conjunto 2: \\n',cr2)\n",
        "print('correlação do conjunto 3: \\n',cr3)\n",
        "print('correlação do conjunto 4: \\n',cr4)\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Questão 5 \n",
            "Coeficiente de correlação\n",
            "correlação do conjunto 1: \n",
            "           x         y\n",
            "x  1.000000  0.816421\n",
            "y  0.816421  1.000000\n",
            "correlação do conjunto 2: \n",
            "           x2        Y2\n",
            "x2  1.000000  0.806095\n",
            "Y2  0.806095  1.000000\n",
            "correlação do conjunto 3: \n",
            "           x3        y3\n",
            "x3  1.000000  0.816287\n",
            "y3  0.816287  1.000000\n",
            "correlação do conjunto 4: \n",
            "           x4        y4\n",
            "x4  1.000000  0.816521\n",
            "y4  0.816521  1.000000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "id": "zs1z3bcuvKDz",
        "outputId": "aec2408e-0570-4007-f3bd-ac7e53e99816"
      },
      "source": [
        "%reset -f \n",
        "#resolução da questão 6 da lista 5\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.linear_model import LinearRegression\n",
        "print(\"Diagrama da questão 6\")\n",
        "alimentação=[4,5,1,3,6,2]\n",
        "exercicio =[1,3,2,4,5,6]\n",
        "rodizio=[3,1,2,6,4,5]\n",
        "x = np.array(alimentação).reshape((-1,1))\n",
        "y = np.array(exercicio)\n",
        "z = np.array(rodizio)\n",
        "modelo = LinearRegression().fit(x,y,z)\n",
        "plt.scatter(x,y,z, color = 'black')\n",
        "y_pred = modelo.predict(x)\n",
        "x_linha = list(range(0,100))\n",
        "x_linha = np.array(x_linha).reshape((-1,1))\n",
        "y_linha_pred = modelo.predict(x_linha)\n",
        "plt.scatter(x_linha, y_linha_pred, color='red')\n",
        "plt.show()\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Diagrama da questão 6\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}